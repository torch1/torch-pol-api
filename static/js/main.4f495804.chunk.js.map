{"version":3,"sources":["logo.svg","YoutubeComponent.js","YoutubeFeed.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","YoutubeComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showVideo","toggleVideo","bind","assertThisInitialized","setState","post","item","embed","react_default","a","createElement","width","YouTube","videoId","youtube_id","src","image_url","style","padding","margin","backgroundColor","color","dipslay","onClick","attachment_title","username","plays_count","created","Component","YoutubeFeed","items","isLoaded","_this2","fetch","then","res","json","_this$state","map","src_YoutubeComponent","App","className","logo","alt","src_YoutubeFeed","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8QC0DzBC,cArDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAHRQ,MAAQ,CAAEC,WAAU,GAIdR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAFNA,6EAQjBG,KAAKS,SAAS,SAACL,EAAMR,GACnB,MAAO,CAACS,WAAWD,EAAMC,8CAO5B,IAeKK,EAAOV,KAAKJ,MAAMe,KAAKD,KACvBE,EAAQC,EAAAC,EAAAC,cAAA,YAQZ,OANEH,EADCZ,KAAKI,MAAMC,UACJQ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,QAAOH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,QAASR,EAAKS,cAEzCN,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,OAAOI,IAAKV,EAAKW,cAIpCR,EAAAC,EAAAC,cAAA,OAAKO,MAjBS,CACdC,QAAS,GACTC,OAAO,GACPC,gBAAgB,UAChBC,MAAM,OACNC,QAAQ,iBAaNd,EAAAC,EAAAC,cAAA,OAAKa,QAAS5B,KAAKM,aAAcM,GACjCC,EAAAC,EAAAC,cAAA,UAAKL,EAAKmB,kBACVhB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,gBAAQL,EAAKoB,UADb,KAEAjB,EAAAC,EAAAC,cAAA,YAAOL,EAAKqB,YAAZ,WAFA,MAEyClB,EAAAC,EAAAC,cAAA,YAAOL,EAAKsB,kBAjD9BC,aC0ChBC,cAtCb,SAAAA,EAAYtC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IAChBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACDQ,MAAQ,CACX+B,MAAO,GACPC,UAAU,GAJIvC,mFAOC,IAAAwC,EAAArC,KACjBsC,MAAM,yEACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACJJ,EAAK5B,SAAS,CACZ2B,UAAS,EACTD,MAAMM,uCAKL,IAAAC,EACmB1C,KAAKI,MAAzBgC,EADCM,EACDN,SAAUD,EADTO,EACSP,MAChB,OAAIC,EAMFvB,EAAAC,EAAAC,cAAA,WACGoB,EAAMQ,IAAI,SAAAhC,GAAI,OACXE,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAC6B,EAAD,CAAkBjC,KAAMA,QAP1BE,EAAAC,EAAAC,cAAA,mCAxBkBkB,aCeXY,mLAXX,OACEhC,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACbjC,EAAAC,EAAAC,cAAA,UAAQ+B,UAAU,cAChBjC,EAAAC,EAAAC,cAAA,OAAKK,IAAK2B,IAAMD,UAAU,WAAWE,IAAI,SACzCnC,EAAAC,EAAAC,cAACkC,EAAD,eANQhB,aCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.4f495804.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport YouTube from 'react-youtube';\nclass YoutubeComponent extends Component {\n  state = { showVideo:false}\n\n  constructor(props) {\n    super(props);\n        this.toggleVideo = this.toggleVideo.bind(this);\n\n  }\n\n  toggleVideo(){\n    //this.state.showVideo = !this.state.showVideo;\n    this.setState((state,props) => {\n      return {showVideo:!state.showVideo}\n    });\n    //this.state.showVideo = !this.state.showVideo;\n  }\n\n  render() {\n\n   var overlay= {\nposition:\"absolute\",\n\t\tmargin:\" 0 auto\",\nmarginLeft:\"25%\",\nopacity:.60\n  }\n\n\n    var postStyle = {\n      padding: 10,\n      margin:10,\n      backgroundColor:\"#eff0f1\",\n      color:\"#333\",\n      dipslay:\"inline-block\"\n    }\n    var post = this.props.item.post;\n    var embed = <div></div>\n    if(this.state.showVideo){\n      embed = <div width=\"100%\"><YouTube videoId={post.youtube_id} /></div>\n    }else{\n      embed = <div>\n\t\t\t\t\t\t\t\t\t<div><img width=\"100%\" src={post.image_url} /></div>\n\t\t\t\t\t\t\t</div>\n    }\n    return ( \n      <div style={postStyle}>\n        <div onClick={this.toggleVideo}>{embed}</div>\n        <h4>{post.attachment_title}</h4>\n        <div>\n        <span>@{post.username}</span> | \n        <span>{post.plays_count} views </span> | <span>{post.created}</span>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default YoutubeComponent\n","import React, { Component } from 'react';\nimport YoutubeComponent from './YoutubeComponent.js'\n\n\nclass YoutubeFeed extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false\n    }\n  }\n  componentDidMount(){\n    fetch(\"https://cors-anywhere.herokuapp.com/https://www.torch1.com/fc-api/915\")\n      .then(res => res.json())\n      .then(json=>{\n        this.setState({\n          isLoaded:true,\n          items:json\n        })\n      })\n  }\n\n  render() {\n    var { isLoaded, items } = this.state;\n    if(!isLoaded){\n      return (\n        <div> Loading...  </div>\n      );\n    }else{\n    return ( \n      <div>\n        {items.map(item =>(\n            <div>\n          <YoutubeComponent item={item} />\n          </div>\n        ))}\n      </div>\n    )\n  }}\n}\n\n\nexport default YoutubeFeed\n\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport YoutubeFeed from './YoutubeFeed.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <YoutubeFeed />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}